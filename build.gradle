buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'net.saliman:gradle-cobertura-plugin:2.4.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.4'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'docker'

jar {
    baseName = 'tournament-services'
    version =  '0.1.0-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

cobertura.coverageFormats = ['html', 'xml']

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.liquibase:liquibase-core'
    compile 'com.google.guava:guava:21.0'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'io.springfox:springfox-swagger2:2.7.0'

    runtime 'org.postgresql:postgresql'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testCompile 'io.rest-assured:json-schema-validator:3.0.2'
    testCompile 'io.rest-assured:rest-assured:3.0.2'
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.2'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'org.hsqldb:hsqldb'
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Tournament Park : Tournament-Services'
        property 'sonar.host.url', 'https:/sonarqube.com'
        property 'sonar.organization', 'swaroopg-github'
        property 'sonar.login', '58a16cb35ec483abf7448919003da7587ebc83ee'
        property "sonar.jacoco.reportPaths", "$buildDir/jacoco/jacocoTest.exec"
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('docker/services/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport